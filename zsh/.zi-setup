#!/usr/bin/env zsh
#
# Only including a shebang to trigger editors to use shell
# syntax highlighting.
#
# Copyright 2006-2022 Joseph Block <jpb@unixorn.net>
#
# BSD licensed, see LICENSE.txt

# Clone zgenom if you haven't already
typeset -A ZI

if [[ ! -d "$ZI[HOME_DIR]" ]]; then
  ZI[HOME_DIR]="${HOME}/.zi"
  ZI[BIN_DIR]="${ZI[HOME_DIR]}/bin"
  ZI_SOURCE_FILE=$ZI[BIN_DIR]/zi.zsh
fi

# zgenom stores the clones plugins & themes in $ZGEN_DIR when it
# is set. Otherwise it stuffs everything in the source tree, which
# is unclean.
#ZGEN_DIR=${ZGEN_DIR:-$HOME/.zgenom}

if [[ ! -f "$ZI_SOURCE_FILE" ]] ; then
  if [[ ! -d "$ZI[BIN_DIR]" ]]; then
    mkdir -p "$ZI[BIN_DIR]"

    compaudit | xargs chown -R "$(whoami)" "$ZI[HOME_DIR]"
    compaudit | xargs chmod -R go-w "$ZI[HOME_DIR]"
  fi
  git clone https://github.com/z-shell/zi.git "$ZI[BIN_DIR]"
fi

if [[ ! -f "$ZI_SOURCE_FILE" ]] ; then
  echo "Can't find zgenom.zsh"
else
  # echo "Loading zgenom"
  source "$ZI_SOURCE_FILE"
  autoload -Uz _zi
  (( ${+_comps} )) && _comps[zi]=_zi
fi

unset ZI_SOURCE_FILE

# Check if a command exists
function can_haz() {
  which "$@" > /dev/null 2>&1
}

load-starter-plugin-list() {
  # If you want to customize your plugin list, create a file named
  # .zsh-quickstart-local-plugins-example in your home directory. That
  # file will be sourced during startup *instead* of running this
  # load-starter-plugin-list function, so make sure to include everything
  # from this function that you want to keep.
  #
  # To make customizing easier, there's a .zsh-quickstart-local-plugins-example
  # file at the top level of the zsh-quickstart-kit repository that you can
  # copy as a starting point. This keeps you from having to maintain a fork of
  # the quickstart kit.
  zi light-mode for \
    z-shell/z-a-meta-plugins \
    @annexes \
    skip'F-Sy-H' @z-shell \
    @zsh-users+fast \
    @romkatv \
    @ext-git \
    @rust-utils

  if ! can_haz fzf; then
    zi pack"bgn-binary+keys" for fzf
  fi

  if ! can_haz svn; then
    echo "Please install the Subversion package needed to make some of the features work"
    echo "For instructions on installing in your operating system, go to https://subversion.apache.org/packages.html"
  fi

  zi pack for ls_colors

  zi ice lucid wait has'fzf'
  zi light Aloxaf/fzf-tab

  # Set keystrokes for substring searching
  zmodload zsh/terminfo
  bindkey "$terminfo[kcuu1]" history-substring-search-up
  bindkey "$terminfo[kcud1]" history-substring-search-down

  # Add my collection of miscellaneous utility functions.
  zi ice lucid wait
  zi light unixorn/jpb.zshplugin

  # Colorize the things if you have grc installed. Well, some of the
  # things, anyway.
  zi ice lucid wait
  zi light unixorn/warhol.plugin.zsh

  # macOS helpers. This plugin is smart enough to detect when it isn't running
  # on macOS and not load itself, so you can safely share the same plugin list
  # across macOS and Linux/BSD.
  zi ice lucid wait
  zi light unixorn/tumult.plugin.zsh

  # Warn you when you run a command that you've set an alias for without
  # using the alias.
  zi ice lucid wait
  zi light djui/alias-tips

  # Add my collection of git helper scripts.
  zi ice lucid wait
  zi light unixorn/git-extra-commands

  # Supercharge your history search with fzf
  zi ice lucid wait
  zi light unixorn/fzf-zsh-plugin

  # Add my bitbucket git helpers plugin.
  zi ice lucid wait
  zi light unixorn/bitbucket-git-helpers.plugin.zsh

  # Adds aliases to open your current repo & branch on github.
  zi ice lucid wait
  zi light peterhurford/git-it-on.zsh

  # Tom Limoncelli's tooling for storing private information (keys, etc)
  # in a repository securely by encrypting them with gnupg.
  zgenom load StackExchange/blackbox

  if [[ ! -f ~/.zsh-quickstart-no-omz ]] || [[ $(_zqs-get-setting load-omz-plugins false) == 'true' ]]; then
    if (( $+commands[svn] )) {
        sni=({git,theme-and-appearance,prompt_info_functions,functions,history,completion,vcs_info,grep}.zsh)
        zi is-snippet has'svn' for svn \
            multisrc'${sni[*]}' pick'/dev/null' \
            atinit'typeset -gx COMPLETION_WAITING_DOTS=true \
        HISTSIZE=290000 SAVEHIST=290000' \
          OMZ::lib
        unset sni
    } else {
        +zi-message "{auto}Subversion not installed!"
    }

    zi is-snippet wait lucid for \
        atload"unalias grv g" \
      OMZP::{git,github,sudo,encode64,extract,colored-man-pages,rsync,screen} \
        if'[[ -d /opt/google-cloud-sdk ]]' \
      OMZP::gcloud \
        if'[[ -f /etc/os-release ]] && source /etc/os-release && [[ "$ID" = arch ]]' \
      OMZP::archlinux \
        if'[[ -d ~/.nvm ]]' \
      OMZP::nvm \
        if'[[ -d ~/.ssh ]]' \
      OMZP::ssh-agent \
        if'[[ -d ~/.gnupg ]]' \
      OMZP::gpg-agent \
        if'[[ "$OSTYPE" = *-gnu ]]' \
      OMZP::gnu-utils \
        has'pip' \
      OMZP::pip \
        has'python' \
      OMZP::python \
        has'yarn' \
      OMZP::yarn \
        if'[ $(uname -a | grep -ci Darwin) = 1 ]' \
      OMZP::{brew,macos}
  fi

  # A set of shell functions to make it easy to install small apps and
  # utilities distributed with pip.
  zi ice lucid wait
  zi light sharat87/pip-app

  zi ice lucid wait
  zi light chrissicool/zsh-256color

  # Docker completion
  zi ice lucid wait
  zi light srijanshetty/docker-zsh

  if ! can_haz exa; then
    zi ice from'gh-r' as'program' sbin'**/exa -> exa' atclone'cp -vf completions/exa.zsh _exa'
    zi light ogham/exa
  fi

  zi wait lucid for \
    has'exa' atinit'AUTOCD=1' \
      zplugin/zsh-exa

  # Load me last
  GENCOMPL_FPATH=$HOME/.zsh/complete

  # Very cool plugin that generates zsh completion functions for commands
  # if they have getopt-style help text. It doesn't generate them on the fly,
  # you'll have to explicitly generate a completion, but it's still quite cool.
  zi ice lucid wait
  zi light RobSis/zsh-completion-generator

  # Save it all to init script.
  zgenom save
}

setup-zgen-repos() {
  zicompinit

  ZQS_override_plugin_list=''

  # If they have both, the new name takes precedence
  if [[ -r $HOME/.zsh-quickstart-local-plugins ]]; then
    ZQS_override_plugin_list="$HOME/.zsh-quickstart-local-plugins"
  fi

  if [[ -r "$ZQS_override_plugin_list" ]]; then
    echo "Loading local plugin list from $ZQS_override_plugin_list"
    source "$ZQS_override_plugin_list"
    unset ZQS_override_plugin_list
  else
    load-starter-plugin-list
  fi

  zicompinit
}

# This comes from https://stackoverflow.com/questions/17878684/best-way-to-get-file-modified-time-in-seconds
# This works on both Linux with GNU fileutils and macOS with BSD stat.

# Naturally BSD/macOS and Linux can't share the same options to stat.
if [[ $(uname | grep -ci -e Darwin -e BSD) = 1 ]]; then

  # macOS version.
  get_file_modification_time() {
    modified_time=$(stat -f %m "$1" 2> /dev/null) || modified_time=0
    echo "${modified_time}"
  }

elif [[ $(uname | grep -ci Linux) = 1 ]]; then

  # Linux version.
  get_file_modification_time() {
    modified_time=$(stat -c %Y "$1" 2> /dev/null) || modified_time=0
    echo "${modified_time}"
  }
fi

# Our installation instructions get the user to make a symlink
# from ~/.zi-setup to wherever they checked out the zsh-quickstart-kit
# repository.
#
# Unfortunately, stat will return the modification time of the
# symlink instead of the target file, so construct a full path to hand off
# to stat so it returns the modification time of the actual .zi-setup file.
if [[ -f ~/.zi-setup ]]; then
  REAL_ZGEN_SETUP=~/.zi-setup
fi
if [[ -L ~/.zi-setup ]]; then
  REAL_ZGEN_SETUP="$(readlink ~/.zi-setup)"
fi


# Old file still works for backward compatibility, but we want the new file
# to take precedence when both exist.
if [[ -f ~/.zsh-quickstart-local-plugins ]]; then
  REAL_ZGEN_SETUP=~/.zsh-quickstart-local-plugins
fi
if [[ -L ~/.zsh-quickstart-local-plugins ]]; then
  REAL_ZGEN_SETUP="${HOME}/$(readlink ~/.zsh-quickstart-local-plugins)"
fi

## If .zi-setup is newer than init.zsh, regenerate init.zsh
#if [ $(get_file_modification_time ${REAL_ZGEN_SETUP}) -gt $(get_file_modification_time ~/.zgenom/init.zsh) ]; then
#  echo "$(basename ${REAL_ZGEN_SETUP}) ($REAL_ZGEN_SETUP) updated; creating a new init.zsh from plugin list in ${REAL_ZGEN_SETUP}"
#  setup-zgen-repos
#fi
unset REAL_ZGEN_SETUP
